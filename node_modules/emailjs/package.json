{
  "name": "emailjs",
  "description": "send text/html emails and attachments from node.js to any smtp server",
  "version": "0.1.17",
  "author": {
    "name": "eleith"
  },
  "contributors": [
    {
      "name": "izuzak"
    }
  ],
  "repository": {
    "type": "git",
    "url": "http://github.com/eleith/emailjs.git"
  },
  "devDependencies": {
    "prompt": ">= 0.1.10"
  },
  "dependencies": {},
  "engine": [
    "node >= 0.3.8"
  ],
  "main": "email",
  "scripts": {
    "test": "node test/run.js"
  },
  "readme": "#v0.1.17\n\n### emailjs\n\nsend emails, html and attachments from node.js to any smtp server\n\n### Installing \n\n\tnpm install emailjs\n\n# FEATURES\n - works with SSL and TLS smtp servers (ex: gmail)\n - supports smtp authentication (PLAIN, LOGIN, CRAMMD5)\n - emails are queued and the queue is sent asynchronously\n - supports sending html emails and emails with multiple attachments (MIME)\n - works with nodejs 3.8 and above\n\n# REQUIRES\n - access to an SMTP Server (ex: gmail)\n\n# EXAMPLE USAGE - text only emails\n\n\t\tvar email \t= require(\"./path/to/emailjs/email\");\n\t\tvar server \t= email.server.connect({\n\t\t\tuser:\t\t\"username\", \n\t\t\tpassword:\"password\", \n\t\t\thost:\t\t\"smtp.gmail.com\", \n\t\t\tssl:\t\ttrue\n\t\t});\n\n\t\t// send the message and get a callback with an error or details of the message that was sent\n\t\tserver.send({\n\t\t\ttext:\t\t\"i hope this works\", \n\t\t\tfrom:\t\t\"you <username@gmail.com>\", \n\t\t\tto:\t\t\"someone <someone@gmail.com>, another <another@gmail.com>\",\n\t\t\tcc:\t\t\"else <else@gmail.com>\",\n\t\t\tsubject:\t\"testing emailjs\"\n\t\t}, function(err, message) { console.log(err || message); });\n\n# EXAMPLE USAGE - html emails and attachments\n\n\t\tvar email \t= require(\"./path/to/emailjs/email\");\n\t\tvar server \t= email.server.connect({\n\t\t\tuser:\t\t\"username\", \n\t\t\tpassword:\"password\", \n\t\t\thost:\t\t\"smtp.gmail.com\", \n\t\t\tssl:\t\ttrue\n\t\t});\n\n\t\tvar headers\t= {\n\t\t\ttext:\t\t\"i hope this works\", \n\t\t\tfrom:\t\t\"you <username@gmail.com>\", \n\t\t\tto:\t\t\"someone <someone@gmail.com>, another <another@gmail.com>\",\n\t\t\tcc:\t\t\"else <else@gmail.com>\",\n\t\t\tsubject:\t\"testing emailjs\"\n\t\t};\n\n\t\t// create the message\n\t\tvar message = email.message.create(headers);\n\n\t\t// attach an alternative html email for those with advanced email clients\n\t\tmessage.attach_alternative(\"<html>i <i>hope</i> this works!</html>\");\n\n\t\t// attach attachments because you can!\n\t\tmessage.attach(\"path/to/file.zip\", \"application/zip\", \"renamed.zip\");\n\n\t\t// send the message and get a callback with an error or details of the message that was sent\n\t\tserver.send(message, function(err, message) { console.log(err || message); });\n\n\t\t// you can continue to send more messages with successive calls to 'server.send', \n\t\t// they will be queued on the same smtp connection\n\n\t\t// or you can create a new server connection with 'email.server.connect' \n\t\t// to asynchronously send individual emails instead of a queue\n\n# API \n\n## email.server.connect(options)\n\n\t// options is an object with the following keys\n\toptions =\n\t{\n\t\tuser \t\t// username for logging into smtp \n\t\tpassword // password for logging into smtp\n\t\thost\t\t// smtp host\n\t\tport\t\t// smtp port (if null a standard port number will be used)\n\t\tssl\t\t// boolean or object {key, ca, cert} (if exists, ssl connection will be made)\n\t\ttls\t\t// boolean (if true, starttls will be initiated)\n\t\ttimeout\t// max number of milliseconds to wait for smtp responses (defaults to 5000)\n\t\tdomain\t// domain to greet smtp with (defaults to os.hostname)\n\t}\n\t\n## email.server.send(message, callback)\n\t\n\t// message can be a smtp.Message (as returned by email.message.create)\n\t// or an object identical to the first argument accepted by email.message.create\n\n\t// callback will be executed with (err, message)\n\t// either when message is sent or an error has occurred\n\n## email.message.create(headers)\n\n\t// headers is an object ('from' and 'to' are required)\n\t// returns a Message object\n\n\t// you can actually pass more message headers than listed, the below are just the\n\t// most common ones you would want to use\n\n\theaders =\n\t{\n\t\ttext\t\t// text of the email \n\t\tfrom\t\t// sender of the format (address or name <address> or \"name\" <address>)\n\t\tto\t\t\t// recipients (same format as above), multiple recipients are separated by a comma\n\t\tcc\t\t\t// carbon copied recipients (same format as above)\n\t\tbcc\t\t// blind carbon copied recipients (same format as above)\n\t\tsubject\t// string subject of the email\n\t}\n\n## Message.attach_alternative(html, charset)\n\n\t// should only be called once\n\n\thtml // string representing the html version of the email message\n\tcharset // defaults to utf-8 if not passed\n\n## Message.attach(path, mime_type, name)\n\n\t// can be called multiple times, each creating a new\n\t// attachment on the email itself\n\n\tpath \t\t\t// string to where the file is located\n\tmime_type\t// string of the file mime type\n\tname\t\t\t// name to give the file as perceived by the recipient\n\t\n## Authors\n\neleith\n",
  "readmeFilename": "Readme.md",
  "bugs": {
    "url": "https://github.com/eleith/emailjs/issues"
  },
  "homepage": "https://github.com/eleith/emailjs",
  "_id": "emailjs@0.1.17",
  "dist": {
    "shasum": "eb34e8768385179ff3256b485b0f1d91f320e0bc"
  },
  "_from": "emailjs@0.1.17",
  "_resolved": "http://registry.npm.taobao.org/emailjs/download/emailjs-0.1.17.tgz"
}
